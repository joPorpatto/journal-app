{"version":3,"sources":["firebase/firebaseConfig.js","helpers/fileUpload.js","helpers/loadNotes.js","types/types.js","actions/notes.js","hooks/useForm.js","components/notes/NotesAppBar.js","components/notes/NoteScreen.js","components/journal/NothingSelected.js","actions/ui.js","actions/auth.js","components/journal/JournalEntry.js","components/journal/JournalEntries.js","components/journal/Sidebar.js","components/journal/JournalScreen.js","components/auth/LoginScreen.js","components/auth/RegisterScreen.js","routers/AuthRouter.js","routers/PrivateRoute.js","routers/PublicRoute.js","routers/AppRouter.js","reducers/uiReducer.js","reducers/notesReducer.js","store/store.js","reducers/authReducer.js","Journal.js","index.js"],"names":["firebaseConfig","apiKey","process","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","initializeApp","googleAuthProvider","GoogleAuthProvider","db","getFirestore","fileUpload","file","a","formData","FormData","append","fetch","method","body","resp","ok","json","cloudResp","secure_url","loadNotes","uid","getDocs","query","collection","notesSnap","notes","forEach","snapHijo","push","id","data","types","activeNote","note","type","payload","addNewNote","startLoadingNotes","dispatch","setNotes","refreshNote","startSaveNote","getState","auth","url","noteToFirestore","noteRef","doc","updateDoc","Swal","fire","title","deleteNote","useForm","initialState","useState","values","setValues","reset","newFormState","handleInputChange","target","name","value","NotesAppBar","useDispatch","active","useSelector","state","className","style","display","onChange","e","files","text","allowOutsideClick","onBeforeOpen","showLoading","fileUrl","close","startUploading","onClick","document","querySelector","click","NoteScreen","formValues","activeId","useRef","useEffect","current","placeholder","autoComplete","src","alt","deleteDoc","startDeleting","NothingSelected","setError","err","finishLoading","startLoginEmailPassw","email","password","getAuth","signInWithEmailAndPassword","then","user","login","displayName","catch","message","logout","JournalEntry","date","noteDate","moment","backgroundSize","backgroundImage","format","JournalEntries","map","Sidebar","signOut","console","log","newNote","Date","getTime","ref","setDoc","JournalScreen","LoginScreen","loading","ui","onSubmit","preventDefault","disabled","signInWithPopup","to","RegisterScreen","msgError","password2","isFormValid","trim","length","validator","isEmail","createUserWithEmailAndPassword","updateProfile","startRegisterWithEmailPasswordName","AuthRouter","exact","path","element","PrivateRoute","isAuthenticated","PublicRoute","AppRouter","checking","setChecking","IsLogginIn","SetIsLogginIn","onAuthStateChanged","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","Journal","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.37ba0962.chunk.js","sourcesContent":["\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider} from 'firebase/auth';\nimport { getFirestore,collection,doc,setDoc  } from 'firebase/firestore';\n\n\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_apiKey, \n  authDomain: process.env.REACT_APP_authDomain, \n  projectId: process.env.REACT_APP_projectId, \n  storageBucket: process.env.REACT_APP_storageBucket, \n  messagingSenderId: process.env.REACT_APP_messagingSenderId, \n  appId: process.env.REACT_APP_appId, \n};\n\ninitializeApp(firebaseConfig)\nconst googleAuthProvider = new GoogleAuthProvider();\nconst db = getFirestore()\n\nexport {\n\n        setDoc,\n        googleAuthProvider,\n        collection,\n        db,\n        doc\n\n}","\n\n\n\nexport const fileUpload = async (file) =>{\n        const cloudUrl = ' https://api.cloudinary.com/v1_1/de68evi8c/upload'\n\n        const formData = new FormData();\n        formData.append('upload_preset', 'react-journal')\n        formData.append('file', file);\n\n\n        try {\n                const resp = await fetch(cloudUrl,{\n                        method : 'POST',\n                        body: formData\n                })\n\n                if (resp.ok) {\n                        const cloudResp = await resp.json();\n                        //ver en postman el secure_url\n                        return cloudResp.secure_url\n                        \n                }else{\n                        throw await resp.json();\n                }\n\n                \n        } catch (error) {\n                throw error\n                \n        }\n}\n","import { collection, query, getDocs } from \"@firebase/firestore\";\nimport { db } from \"../firebase/firebaseConfig\";\n\nexport const loadNotes = async (uid) => {\n\n        const notesSnap = await getDocs(query(collection(db, `${ uid }/journal/notes`)));\n        const notes = [];\n        //console.log(\"aca\",notesSnap)\n        notesSnap.forEach( snapHijo => {\n                notes.push({\n                        id: snapHijo.id,\n                        ...snapHijo.data()\n                        })\n        });\n\n        return notes;\n};","export const types = {\n        // valor al que apunta [ ]\n        //en el reducer configura las acciones\n        login: '[Auth] Login' ,\n        logout: '[Auth] Logout',\n\n        uiSetError: '[UI] Set Error',\n        uiRemoveError: '[UI] Remove Error',\n\n        uiStartLoading: '[UI] Start loading',\n        uiFinishLoading: '[UI] Finish loading',\n\n        notesAddNew: '[Notes] New note',\n        notesActive: '[Notes] Set active note',\n        notesLoad: '[Notes] Load notes',\n        notesUpdated: '[Notes] Updated note',\n        notesFileUrl: '[Notes] Updated image url',\n        notesDelete: '[Notes] Delete note',\n        notesLogoutCleaning: '[Notes] Logout Cleaning',\n\n\n\n}","import { deleteDoc, updateDoc } from \"firebase/firestore\";\nimport Swal from \"sweetalert2\";\nimport { db, doc, setDoc, collection } from \"../firebase/firebaseConfig\";\nimport { fileUpload } from \"../helpers/fileUpload\";\nimport { loadNotes } from \"../helpers/loadNotes\";\nimport { types } from \"../types/types\";\n\n\n\n\nexport const startNewNote = () => {\n        return async ( dispatch, getState ) => {\n\n                //obtenemos el state - simil useSelector\n                const uid = getState().auth.uid;\n                console.log(uid)\n\n                const newNote = {\n                        title: '',\n                        body: '',\n                        date: new Date().getTime()\n                }\n\n                const ref = doc(collection(db, `${uid}/journal/notes`));\n                await setDoc(ref, newNote);\n\n                dispatch(activeNote(ref.id,newNote))\n                dispatch(addNewNote(ref.id, newNote))\n                \n        }\n\n}\n\n\nexport const activeNote = (id,note) =>( {\n        type: types.notesActive,\n        payload: {\n                id,\n                ...note\n        }\n});\n\nexport  const addNewNote = (id,note) => ({\n        type: types.notesAddNew,\n        payload: {\n                id, \n                ...note\n        }\n})\n\n\nexport const startLoadingNotes = ( uid ) => {\n        return async( dispatch ) => {\n        \n                const notes = await loadNotes( uid );\n                dispatch( setNotes( notes ) );\n\n        }\n}\nexport const setNotes = ( notes ) => ({\n    type: types.notesLoad,\n    payload: notes\n});\n\n\n\n\nexport const refreshNote = ( id, note ) => ({\n        type: types.notesUpdated,\n        payload: {\n                id,\n                note: {\n                        id,\n                        ...note\n                }\n        }\n});\n\n\nexport const startUploading = (file) => {\n        return async(dispatch,getState) =>{\n                const {active}  = getState().notes; \n                \n                Swal.fire({\n                        title: 'Uploading...',\n                        text: 'Please wait...',\n                        allowOutsideClick: false,\n                        onBeforeOpen: () => {\n                                Swal.showLoading();\n                        }\n        });\n                \n                const fileUrl = await fileUpload(file);\n                active.url = fileUrl\n\n                //llevar a database firebase\n                dispatch(startSaveNote(active))              \n                \n                Swal.close();\n        }\n}\n\nexport const startSaveNote = (note) => {\n        return async(dispatch,getState) => {\n                const {uid} = getState().auth\n                \n                //si hay algo que es undefined, larga err\n                if(!note.url){\n                        delete note.url\n                }\n                //se usa .. para separar la note\n                const noteToFirestore = {...note}\n                //eliminamos id del objeto\n                delete noteToFirestore.id\n\n                //link de database - firestore\n                const noteRef = doc(db, `${uid}/journal/notes/${note.id}`)\n                await updateDoc(noteRef,noteToFirestore);\n                \n\n                //la idea del refresh esque se actualice solo la nota que cambia y no todas las notas\n                dispatch( refreshNote( note.id, note ) );    \n                Swal.fire('Saved', note.title, 'success');\n\n                 \n        }\n}\n\nexport const startDeleting = (id)=>{\n        return async(dispatch, getState) => {\n\n                const uid = getState().auth.uid;\n                const noteRef = doc(db, `${uid}/journal/notes/${id}`)\n                await deleteDoc(noteRef);\n                \n                //borra el store\n                dispatch(deleteNote(id));\n}}\n\n\n\n\n\n//acciones que modifican el store\nexport const deleteNote = (id) =>({\n        type: types.notesDelete,\n        payload: id\n})\n\nexport const noteLogout = () => ({\n        type: types.notesLogoutCleaning,\n\n});\n","import { useState } from \"react\"\n\n\nexport const useForm = ( initialState = {} ) => {\n    \n    const [values, setValues] = useState(initialState);\n\n    const reset = (newFormState= initialState) => {\n        setValues( newFormState );\n    }\n\n\n    const handleInputChange = ({ target }) => {\n\n        setValues({\n            ...values,\n            [ target.name ]: target.value\n        });\n\n    }\n\n    return [ values, handleInputChange, reset ];\n\n}","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { startSaveNote, startUploading } from '../../actions/notes';\n\nexport const NotesAppBar = () => {\n        const dispatch = useDispatch();\n        const {active} = useSelector(state => state.notes)\n\n        const handleSave = () =>{\n                dispatch(startSaveNote( active ))\n                \n        }\n\n        const handlePictureClick = () => {\n                  document.querySelector('#fileSelector').click();\n          }\n    \n        const handleFileChange = (e) => {\n                const file = e.target.files[0];\n                if ( file ) {\n                        dispatch( startUploading( file ) );\n                }\n        }\n    return (\n        <div className=\"notes__appbar\">\n            <span>28 de agosto 2020</span>\n            \n            <input \n                id=\"fileSelector\"\n                type=\"file\"\n                name=\"file\"\n                style={{ display: 'none' }}\n                onChange={ handleFileChange }\n            />\n\n            <div>\n                <button \n                    className=\"btn\"\n                    onClick={ handlePictureClick }\n                >\n                    Picture\n                </button>\n\n                <button \n                        className=\"btn\"\n                        onClick={handleSave}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { activeNote, startDeleting } from '../../actions/notes'\nimport { useForm } from '../../hooks/useForm'\nimport { NotesAppBar } from './NotesAppBar'\n\nexport const NoteScreen = () => {\n\n\n        const dispatch = useDispatch()\n        const {active} = useSelector(state => state.notes)\n\n        const [formValues, handleInputChange,reset] =useForm( active);\n        const {body, title, id} = formValues;\n        //useForm va a manejar el estado y sus cambios\n        //pero no va a mostrar por pantallas si se selecciona nueva nota \n        // se altera el reset del useForm para que no explote*\n\n\n        const activeId = useRef(active.id)\n\n        //* esto hace que cambie la  nota seleccionada\n        useEffect( ( ) => {\n                if (active.id !== activeId.current) {\n                        reset(active);\n                        activeId.current = active.id //evita el ciclo infinito\n                }                 \n        }, [active,reset])\n\n\n        //hace que cualquier modificacion en la caja de texto cambie el state activo\n        useEffect( ( ) => {        \n                dispatch(activeNote(formValues.id, {...formValues}))\n        }, [formValues,dispatch])\n\n\n        const handleDelete = ( ) => {\n                dispatch( startDeleting( id ) );\n        }\n\n\n        return (\n                <div className=\"notes__main-content\">\n                        \n                        <NotesAppBar />\n\n                        <div className=\"notes__content\">\n\n                                <input \n                                        type=\"text\"\n                                        placeholder=\"Some awesome title\"\n                                        className=\"notes__title-input\"\n                                        autoComplete=\"off\"\n                                        name= \"title\"\n                                        value={title}\n                                        onChange={handleInputChange}\n                                />\n\n                                <textarea\n                                        placeholder=\"What happened today\"\n                                        className=\"notes__textarea\"\n                                        name=\"body\"\n                                        value={body}\n                                        onChange={handleInputChange}\n                                ></textarea>\n\n                                {\n                                        (active.url)\n                                        &&\n                                        (<div className=\"notes__image\">\n                                                <img \n                                                        src={active.url}\n                                                alt=\"imagen\"\n                                                />\n                                        </div>)\n                                }\n\n\n                        </div>\n\n\n                        <button\n                                className=\"btn btn-danger\"\n                                onClick={handleDelete}\n                                >\n                                        DELETE\n\n                        </button>\n\n                </div>\n        )\n}\n","import React from 'react'\n\nexport const NothingSelected = () => {\n    return (\n        <div className=\"nothing__main-content\">\n            <p>\n                Select something\n                <br />\n                pr create an entry!\n            </p>\n\n            <i className=\"far fa-star fa-4x mt-5\"></i>\n\n        </div>\n    )\n}\n","import { types } from '../types/types';\n\nexport const setError = ( err ) => ({\n    type: types.uiSetError,\n    payload: err\n});\n\nexport const removeError = () => ({\n    type: types.uiRemoveError\n});\n\n//estas  acciones sirven para bloquear y desbloquear el boton de login \nexport const startLoading = () => ({\n    type: types.uiStartLoading\n})\nexport const finishLoading = () => ({\n    type: types.uiFinishLoading\n})\n\n ","import { createUserWithEmailAndPassword, getAuth, signInWithEmailAndPassword, signInWithPopup, updateProfile } from 'firebase/auth';\nimport { googleAuthProvider } from '../firebase/firebaseConfig';\nimport {types} from '../types/types';\nimport { finishLoading, startLoading } from './ui';\nimport Swal from 'sweetalert2';\nimport { noteLogout } from './notes';\n\n\n\n\nexport const startLoginEmailPassw = (email, password) => {\n        \n        //el dispatch viene de thunk\n        return (dispatch) =>{\n                dispatch(startLoading()) ///dispara bloqueo\n                \n                const auth = getAuth();\n                signInWithEmailAndPassword(auth,email,password )\n                .then(  ({user}) => {\n                        dispatch(\n                                login(user.uid, user.displayName  )\n                                );\n                                dispatch(finishLoading());\n                                \n                        })\n                        \n                        .catch((err)=> {\n                                dispatch(finishLoading());\n                                Swal.fire('Error', err.message, 'error')\n                                \n                                \n                        });\n\n                       \n        }\n\n                \n}\n\nexport const startGoogleLogin = () =>{\n    return (dispatch) =>{\n        const auth = getAuth();\n        signInWithPopup(auth, googleAuthProvider)\n            .then(({user}) =>{\n                dispatch(login(user.uid, user.displayName))\n            });\n        //     .then(user =>{\n        //         dispatch(login(user))\n        //     });\n    }\n}\n\n/////////////////////////////////////////\nexport const startRegisterWithEmailPasswordName = (email,password,name) =>{\n        return ( dispatch ) => {\n                const auth = getAuth();\n                createUserWithEmailAndPassword(auth,email,password )\n                .then( async ({user}) => {\n                        await updateProfile(user,{displayName:name})\n                        dispatch( login(user.uid, user.displayName  )\n                        )\n                        \n                })\n                .catch((err)=> \n                        //\n                        \n                        Swal.fire('Error', err.message, 'error')\n                        )\n\n        }\n}\nexport const login = (uid,displayName) => {\n        return{\n                type: types.login,\n                payload: {\n                        uid,\n                        displayName\n                }\n        }\n}\n\nexport const startLogout = () => {\n        return async (dispatch) => {     \n                const auth = getAuth();\n                await auth.signOut();        \n                dispatch( logout() );\n                dispatch(noteLogout() );\n        }\n};\n\nexport const logout = () =>({\n        type: types.logout\n\n})","import React from 'react'\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport { activeNote } from '../../actions/notes';\n\nexport const JournalEntry = ({id, date, title, body, url}) => {\n\n\n        const noteDate = moment(date);\n        const dispatch = useDispatch()\n        \n        const handleEntryClick =()=>{\n                dispatch(activeNote(id, {date, title, body, url}))\n        }\n\n        return (\n        <div \n                className=\"journal__entry pointer\"\n                onClick={handleEntryClick}\n        >\n                \n                {\n                        url &&\n                        <div \n                                className=\"journal__entry-picture\"\n                                style={{\n                                        backgroundSize: 'cover',\n                                        backgroundImage: `url(${url})`\n                                }}\n                        ></div>\n                        }\n\n                        <div className=\"journal__entry-body\">\n                        <p className=\"journal__entry-title\">\n                                {title}\n                        </p>\n                        <p className=\"journal__entry-content\">\n                                {body}\n                        </p>\n                        </div>\n\n                        <div className=\"journal__entry-date-box\">\n                        <span>{noteDate.format('dddd')}</span>\n                        <h4>{noteDate.format('Do')}</h4>\n                        </div>\n\n        </div>\n        )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux';\nimport { JournalEntry } from './JournalEntry';\n\nexport const JournalEntries = () => {\n\n        //no hace falta mandar componentes ni argunmentos\n        //la info está en el store\n        //asi puedo usar useSelector\n        const {notes} = useSelector(state => state.notes)\n\n    return (\n        <div className=\"journal__entries\">\n                <h1>Journal entries</h1>\n                <br></br>\n            \n            {\n                notes.map( note => (\n                    <JournalEntry \n                        key={ note.id } \n                        {...note}\n                        />\n                ))\n            }\n\n        </div>\n    )\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { startLogout } from '../../actions/auth'\nimport { startNewNote } from '../../actions/notes'\nimport { JournalEntries } from './JournalEntries'\n\nexport const Sidebar = () => {\n        const dispatch = useDispatch()\n        const {name} = useSelector(state => state.auth)\n\n        \n        const handleLogout = () =>{\n                dispatch(startLogout())\n\n        }\n\n        const handleAddNew = () =>{\n                dispatch(startNewNote())\n        }\n\n        return (\n                <aside className=\"journal__sidebar\">     \n\n                        <div className=\"journal__sidebar-navbar\">\n                                <h3 className=\"mt-5\">\n                                        <i className=\"far fa-moon\"></i>\n                                        <span> {name}</span>\n                                </h3>\n                                <button \n                                        className=\"btn\"\n                                        onClick={handleLogout}\n                                        >\n                                        Logout\n                        </button>\n\n                        </div>\n\n                        <div \n                                className=\"journal__new-entry\"\n                                onClick={handleAddNew}\n                        >\n                                <i className=\"far fa-calendar-plus fa-5x\"></i>\n                                <p className=\"mt-5\">\n                                        New entry\n                                </p>\n                        </div>\n\n                        <JournalEntries />\n\n\n                </aside>\n        )\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { NoteScreen } from '../notes/NoteScreen';\nimport { NothingSelected } from './NothingSelected';\nimport { Sidebar } from './Sidebar';\n\n\n\nexport const JournalScreen = () => {\n\n        //si existe una nota la mostramos\n        const {active} = useSelector(state => state.notes)\n        return (\n                <div className=\"journal__main-content\" >\n                \n                        <Sidebar />\n\n                        <main>\n                                \n                                {\n                                        (active)                                        \n                                        ?(<NoteScreen/>)\n                                        : (<NothingSelected/>)\n                                }\n                                \n                        </main>\n\n                </div>\n        )\n}","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport { useForm } from '../../hooks/useForm';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {  startGoogleLogin, startLoginEmailPassw } from '../../actions/auth';\n\nexport const LoginScreen = () => {\n\n        const dispatch = useDispatch()\n        \n        //solo lo uso para poder bloquear boton\n        const {loading} = useSelector(state => state.ui)\n\n        //SE HACE PARA RELLENAR DATOS \n        const [ formValues, handleInputChange ] = useForm({\n                email: 'jojo@gmail.com',\n                password: '123456'\n        })\n\n        //SE DESTRUCTURAN LOS DATOS\n        const { email, password } = formValues;\n\n        //DESPACHA A LA BASE DE DATOS FIREBASE\n        const handleSubmit = (e) => {\n                e.preventDefault();\n                dispatch(startLoginEmailPassw(email,password))\n\n\n        }\n        //SE DESPACHA LA AUTENTICACION DE GOOGLE\n        const handleGoogleLogin = () => {\n                dispatch( startGoogleLogin());\n        }\n\n\n        return (\n                <div className=\"animate__animated animate__fadeIn\">\n                        <h3 className=\"auth__title\" >Login </h3>\n                        <form onSubmit={handleSubmit}>\n                                \n                                <input \n                                        type=\"text\"\n                                        placeholder=\"Email\"\n                                        name=\"email\"\n                                        className=\"auth__input\"\n                                        autoComplete=\"off\"\n                                        value={email}\n                                        onChange={ handleInputChange}\n\n                                        />\n\n                                <input \n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        name=\"password\"\n                                        className=\"auth__input\"\n                                        value = {password}\n                                        onChange={ handleInputChange}\n\n\n\n                                \n                                />\n\n                                <button\n                                        type= \"submit\"\n                                        className=\"btn btn-primary btn-block\"\n                                        disabled={ loading }\n                                        //login está cargando -BLOQUEADO\n\n                                >\n                                        Login\n                                </button>\n\n\n                                <hr/>\n                                <div className=\"auth__social-networks\">\n                                        <p>Login  whit social networks</p>\n                                        <div \n                                                className=\"google-btn\"\n                                                onClick={handleGoogleLogin}\n                                                >\n                                                <div className=\"google-icon-wrapper\">\n                                                        <img className=\"google-icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" alt=\"google button\" />\n                                                </div>\n                                                <p className=\"btn-text\">\n                                                        <b>Sign in with google</b>\n                                                </p>\n                                                </div>\n                                </div>\n\n                                <Link \n                                        to=\"/auth/register\"\n                                        className=\"link\"\n                                        > Create  new account\n                                </Link>        \n                        </form>\n\n                </div>\n\n\n    )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useForm } from '../../hooks/useForm';\nimport validator from 'validator';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeError, setError } from '../../actions/ui';\nimport { startRegisterWithEmailPasswordName } from '../../actions/auth';\n\nexport const RegisterScreen = () => {\n        \n        const dispatch = useDispatch();\n\n        //const por si hay errores al escribir\n        const { msgError } = useSelector( state => state.ui ); \n\n        //SE HACE PARA RELLENAR DATOS \n        const [formValues, handleInputChange] = useForm({\n                name:'jo',\n                email:'jojo@gmail.com',\n                password: '123456',\n                password2:'123456'\n\n        })\n        const {name,email,password,password2} = formValues;\n\n\n        //ENVIA DATOS REGISTRADOS\n        const handleRegister = (e)=> {\n                e.preventDefault();\n                //SI SON CORRECTOS LOS DESPACHA A LA BASE DE DATOS DE FIREBASE\n                if ( isFormValid() ) {\n                        dispatch( startRegisterWithEmailPasswordName(email, password, name) );\n        }\n                \n        }\n\n        //VALIDACIONES\n        const isFormValid = () =>{\n\n                if ( name.trim().length === 0 ) {\n                        dispatch( setError('Name is required') )\n                        return false;\n                } else if ( !validator.isEmail( email ) ) {\n                        dispatch( setError('Email is not valid') )\n                        return false;\n                } else if ( password !== password2 || password.length < 5 ) {\n                        dispatch( setError('Password should be at least 6 characters and match each other') )\n                        return false\n                }\n                //SI NO PASA NADA REMUEVE EL ERROR                \n                dispatch( removeError() );\n                return true;\n        }\n                \n               \n    return (\n\n            <div className=\"animate__animated animate__fadeIn\">\n                <h3 className=\"auth__title\" >Register </h3>\n                <form onSubmit={handleRegister}>\n\n                        { \n                                msgError \n                                &&\n                                (\n                                        <div className=\"auth__alert-error\">\n                                                {msgError}\n                                        </div>\n                                )\n                        }\n\n                        <input \n                                type=\"text\"\n                                placeholder=\"Name\"\n                                name=\"name\"\n                                className=\"auth__input\"\n                                autoComplete=\"off\"\n                                value={name}\n                                onChange={handleInputChange}\n                                />\n\n                         <input \n                                type=\"text\"\n                                placeholder=\"email\"\n                                name=\"email\"\n                                className=\"auth__input\"\n                                autoComplete=\"off\"\n                                value={email}\n                                onChange={handleInputChange}\n                                />\n\n                        <input \n                                type=\"password\"\n                                placeholder=\"Password\"\n                                name=\"password\"\n                                className=\"auth__input\"\n                                value={password}\n                                onChange={handleInputChange}\n                        \n                        />\n\n                         <input \n                                type=\"password\"\n                                placeholder=\"Confirm password\"\n                                name=\"password2\"\n                                className=\"auth__input\"\n                                value={password2}\n                                onChange={handleInputChange} \n                        />\n\n\n                        <button\n                               type= \"submit\"\n                               className=\"btn btn-primary btn-block mb-5\"\n                        >\n                                Register\n                        </button>\n\n\n                       \n\n                        <Link \n                                to=\"/auth/login\"\n                                className=\"link\"\n                                > Already registered?\n                        </Link>        \n                </form>\n\n        </div>\n        \n\n    )\n}\n","import React from 'react';\nimport {  Routes, Route, Navigate } from 'react-router-dom';\n\nimport { LoginScreen } from '../components/auth/LoginScreen';\nimport { RegisterScreen } from '../components/auth/RegisterScreen';\n\nexport const AuthRouter = () => {\n    return (\n                <div className=\"auth__main\">\n                        <div className=\"auth__box-container\">\n                                <Routes>          \n                                \n                                        <Route \n                                                exact\n                                                path=\"/login\"\n                                        \n                                                element={ <LoginScreen/> }\n                                        />\n\n                                        <Route \n                                                exact\n                                                path=\"/register\"\n                                                element={ <RegisterScreen/> }\n                                        />\n\n                                        < Route\n                                                path=\"/*\"\n                                                element={< Navigate to =\"/auth/login\" />}/>\n\n                                </Routes>\n\n                        </div>\n                </div>\n    )\n}\n","import React from 'react'\n\nimport { Navigate } from 'react-router-dom'\nimport PropTypes from 'prop-types';\n\nexport const PrivateRoute = ({\n        isAuthenticated,\n        element,\n\n}) => {\n\n        return (\n                (isAuthenticated)\n                        ? (element)\n                        : (<Navigate to=\"/auth/login\"/>)\n               \n                   \n        )\n}\n\n\nPrivateRoute.propTypes = {\n        isAuthenticated: PropTypes.bool.isRequired,\n        element: PropTypes.object.isRequired\n}\n\n","import React from 'react'\nimport { Navigate } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\n\n\nexport const PublicRoute = ({\n        isAuthenticated,\n        element,\n        }) => {\n                return (\n                        (!isAuthenticated)\n                                ? (element)\n                                : (<Navigate to=\"/\"/>)\n                \n                        \n                )\n        \n}\n\n\nPublicRoute.propTypes = {\n        isAuthenticated: PropTypes.bool.isRequired,\n        element: PropTypes.object.isRequired\n}","import React, { useEffect } from 'react';\nimport { getAuth, onAuthStateChanged } from '@firebase/auth';\nimport {\n    BrowserRouter as Router,\n    Routes,\n    Route,\n    Navigate\n  } from 'react-router-dom';\nimport { JournalScreen } from '../components/journal/JournalScreen';\n\nimport { AuthRouter } from './AuthRouter';\nimport { useDispatch } from 'react-redux';\nimport { login } from '../actions/auth';\nimport { useState } from 'react';\nimport { PrivateRoute } from './PrivateRoute';\nimport { PublicRoute } from './PublicRoute';\nimport { startLoadingNotes } from '../actions/notes';\n// import { PrivateRoute } from './PrivateRoute';\n\n// import { JournalScreen } from '../components/journal/JournalScreen';\n\nexport const AppRouter = () => {\n\n        const dispatch = useDispatch()\n        const [checking, setChecking] = useState(true);\n        const [IsLogginIn, SetIsLogginIn] = useState(false)\n\n        //para ver si esta loge\n        useEffect(() => {\n                const auth = getAuth();\n                onAuthStateChanged(auth,  async (user) =>{\n                        //si user tiene algo sigue\n                        if (user?.uid) {\n                                dispatch(login(user.uid, user.displayName));\n                                SetIsLogginIn(true)\n                                dispatch(startLoadingNotes(user.uid))\n                        }else {\n                                \n                                SetIsLogginIn(false)\n                        }\n                        setChecking(false);\n\n                })\n               \n        }, [dispatch,setChecking ] )\n\n        if (checking) {  \n                return(\n                        <h1>Waiting data....</h1>\n                )\n                \n        }\n\n\n         return (\n\n                <Router>\n                        <div>\n                                <Routes>\n                                        {/* privada - Journal */}\n                                        <Route\n                                                path='/*'\n                                                element={<PrivateRoute \n                                                                        isAuthenticated={IsLogginIn}\n                                                                        element={<JournalScreen/>}\n                                                                />}\n                                        />\n                                        {/* PUBLICA - auth */}\n                                        <Route\n                                              \n                                                path='/auth/*'\n                                                element={<PublicRoute \n                                                                        isAuthenticated={IsLogginIn}\n                                                                        element={<AuthRouter/>}\n                                                                />}\n                                        />\n                                        \n                                        < Route\n                                                path=\"/*\"\n                                                element={< Navigate to =\"/auth/login\" />}/>\n\n                        \n                                </Routes>\n\n                        </div>\n                </Router>\n\n\n\n                // <Router>\n                //         <Routes>\n                //                 {IsLogginIn \n                //                 ?\n                //                 <Route\n                //                         //isAuthenticated= {IsLogginIn}\n                //                         path='/'\n                //                         element={<JournalScreen />}\n                //                 />\n                //                 :\n                //                 <Route\n                //                         path='/'\n                //                         element={<Navigate replace to='auth/login'/>}\n                //                 />\n                //                 }\n                //                 <Route\n                //                 path='auth/*'\n                //                 element={<AuthRouter/>}\n                //                 />\n                \n                \n                //         </Routes>\n                // </Router>\n    )\n}\n","\n\n\nimport { types } from '../types/types';\n\nconst initialState = {\n    loading: false,\n    msgError: null\n}\n\n\nexport const uiReducer = ( state = initialState, action ) => {\n\n    switch ( action.type ) {\n        case types.uiSetError:\n            return {\n                //mantengo el mismo state pero cambio el mensaje de error\n                ...state,\n                msgError: action.payload\n            }\n\n        case types.uiRemoveError:\n                return {\n                    ...state,\n                    msgError: null\n                }\n\n        case types.uiStartLoading:\n            return {\n                ...state,\n                loading: true\n            }\n \n        case types.uiFinishLoading:\n            return {\n                ...state,\n                loading: false\n            }\n\n        default:\n            return state;\n    }\n\n}","import { types } from \"../types/types\";\n\n\nconst initialState = {\n        notes: [],\n        active: null\n}\n\n\nexport const notesReducer = ( state= initialState, action )=>{\n\n        switch (action.type) {\n\n                case types.notesActive:\n\n                //regresa nuevo estado\n                //clona el anterior\n                //coloca la nota activa\n                return {\n                        ...state,\n                        active: {\n                                ...action.payload\n                        }\n                }\n\n                case types.notesAddNew:\n                        return {\n                                ...state,\n                                notes: [action.payload, ...state.notes]\n                        }\n\n\n                case types.notesLoad:\n                return {\n                        ...state,\n                        notes: [ ...action.payload ]\n                }\n                \n                case types.notesUpdated:\n                        return {\n                                ...state,\n                                //muta solo la nota \n                                notes: state.notes.map(\n                                        note => note.id === action.payload.id\n                                                ? action.payload.note\n                                                : note\n                                )\n                }\n                case types.notesDelete:\n                        return {\n                                ...state,\n                                active:null,\n                                notes: state.notes.filter(note => note.id !== action.payload)\n                        }\n                case types.notesLogoutCleaning:\n                        return {\n                                ...state,\n                                active: null,\n                                notes: [ ]\n                        }\n                        \n                \n                \n                default:\n                        return state;\n\n        }\n}\n\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux';\nimport { authReducer } from '../reducers/authReducer';\nimport thunk from 'redux-thunk'\nimport { uiReducer } from '../reducers/uiReducer';\nimport { notesReducer } from '../reducers/notesReducer';\n\n\n\n//sirve parar aplicar diferentes middlewares\nconst composeEnhancers = (\n        typeof window !== 'undefined' \n        && \n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        ) \n        || compose;\n\n\n//todos los reducers van acá ( ver carpeta actions)\nconst reducers = combineReducers({\n        auth: authReducer,\n        ui: uiReducer,\n        notes: notesReducer\n})\n\nexport const store = createStore(\n        reducers,\n        composeEnhancers(\n                applyMiddleware(thunk)\n        )\n        )","import { types } from \"../types/types\";\n\n\nexport const authReducer = (state = {},action) =>{\n\n        switch (action.type) {\n                case types.login:\n                        return {\n                                uid: action.payload.uid,\n                                name: action.payload.displayName\n                        }\n                        \n                case types.logout:\n                        return{}\n                default:\n                        return state;\n        }\n}","import React from 'react'\nimport {Provider} from 'react-redux';\nimport { AppRouter } from './routers/AppRouter'\nimport { store } from './store/store';\n\nexport const Journal = () => {\n        return (\n                <Provider store={store}>\n                        <AppRouter/>                        \n                </Provider>\n        )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Journal } from './Journal';\nimport \"./styles/styles.scss\"\n\n\nReactDOM.render(        \n    < Journal/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}